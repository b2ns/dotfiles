priority -40

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
  semi, space_before_function_paren, keyword_spacing
)
endglobal

#######################  控制  #######################
snippet if "if ..." i
if ($1) {
	$2
}$0
endsnippet

snippet el "else ..." w
else {
	$1
}$0
endsnippet

snippet ife "if ... else ..." i
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

snippet eli "else ... if ..." i
else if ($1) {
	$2
}$0
endsnippet

snippet swi "switch ... case ..." i
switch ($1) {
	case 1$2:
		$3
		break;
	default:
		break;$4
}$0
endsnippet

snippet for "for loop" i
for ($1) {
	$2
}$0
endsnippet

snippet foi "for loop i" i
for (let i = 0$1; i < n$2; i++$3) {
	$4
}$0
endsnippet

snippet foj "for loop j" i
for (let j = 0$1; j < n$2; j++$3) {
	$4
}$0
endsnippet

snippet whi "while loop" i
while ($1) {
	$2
}$0
endsnippet

#######################  函数  #######################
snippet fn "匿名函数" i
function () {
	$1
}$0
endsnippet

snippet >>> "箭头函数" i
($1) => $0
endsnippet

snippet fnc "带参数函数" i
function $1($2) {
	$3
}$0
endsnippet

snippet === "箭头函数" i
($1) => {
	$2
}$0
endsnippet

snippet fnp "自执行函数包装" i
(function () {
	$1
})();
endsnippet

#######################  输入输出  #######################
snippet log "控制台log输出" i
console.log($1);$0
endsnippet

snippet dir "控制台dir输出" i
console.dir($1);$0
endsnippet

snippet hel "hello world" i
console.log('hello world');$0
endsnippet

#######################  模块  #######################
snippet imp "import from ;" i
import '$1';$0
endsnippet

snippet impf "import from ;" i
import $2 from '$1';$0
endsnippet

snippet req "const x = require('x');" i
const $2 = require('$1');$0
endsnippet

snippet exp "export ;" i
export const $0
endsnippet

snippet expd "export default ;" i
export default $0
endsnippet

#######################  class  #######################
snippet cl "class ..." i
class $1 {
	constructor($2) {
	}
}$0
endsnippet

snippet ex "class extends" i
class $1 extends $2 {
	constructor($3) {
		super($4);
	}
}$0
endsnippet

#######################  React  #######################

#######################  Vue  #######################

#######################  Node.js  #######################
snippet fs "" i
const fs = require('fs');$0
endsnippet

snippet http "" i
const http = require('http');$0
endsnippet

snippet net "" i
const net = require('net');$0
endsnippet

snippet path "" i
const path = require('path');$0
endsnippet

snippet url "" i
const url = require('url');$0
endsnippet

snippet querystring "" i
const qs = require('querystring');$0
endsnippet

snippet events "" i
const Emitter = require('events').EventEmitter;$0
endsnippet

#######################  其他  #######################
snippet con "const" i
const 
endsnippet

snippet timeout "setTimeout" i
setTimeout(() => {
	$2
}, ${1:1000});
endsnippet

snippet okeys "Object.keys().foreach" i
Object.keys($1).forEach((key) => {
	$0
});
endsnippet

# vim:ft=snippets:

priority -40

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
  semi, space_before_function_paren, keyword_spacing
)
endglobal

#######################  控制  #######################
snippet if "if ..." i
if ($1) {
	$2
}$0
endsnippet

snippet el "else ..." w
else {
	$1
}$0
endsnippet

snippet ife "if ... else ..." i
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

snippet eli "else ... if ..." i
else if ($1) {
	$2
}$0
endsnippet

snippet swi "switch ... case ..." i
switch ($1) {
	case $2:
		$3
		break
	default:
		break$4
}$0
endsnippet

snippet for "for loop" i
for (let i = 0; i < $1; i++) {
	$2
}$0
endsnippet

snippet foof "for of loop" i
for (const ${1:item} of $2) {
	$3
}$0
endsnippet

snippet foin "for in loop" i
for (const ${1:key} in $2) {
	$3
}$0
endsnippet

snippet wh "while loop" i
while ($1) {
	$2
}$0
endsnippet

#######################  函数  #######################
snippet fun "函数" i
function $1($2) {
	$3
}$0
endsnippet

snippet af "箭头函数" i
($1) => $0
endsnippet

snippet afo "箭头函数直接返回对象" i
($1) => ({$2})$0
endsnippet

snippet afb "箭头函数体" i
($1) => {
	$2
}$0
endsnippet

snippet funas "async 函数" i
async function $1($2) {
	$3
}$0
endsnippet

#######################  输入输出  #######################
snippet log "控制台log输出" i
console.log($1)$0
endsnippet

snippet dir "控制台dir输出" i
console.dir($1)$0
endsnippet

snippet hel "hello world" i
console.log('hello world')$0
endsnippet

#######################  模块  #######################
snippet im "import from " i
import '$1'$0
endsnippet

snippet imp "import from " i
import $2 from '$1'$0
endsnippet

snippet req "const x = require('x')" i
const $2 = require('$1')$0
endsnippet

snippet exp "export " i
export const $0
endsnippet

snippet expf "export " i
export function $1($2) {
	$3
}$0
endsnippet

snippet expd "export default " i
export default $0
endsnippet

#######################  class  #######################
snippet cl "class ..." i
class $1 {
	constructor($2) {
	}
}$0
endsnippet

snippet ex "class extends" i
class $1 extends $2 {
	constructor($3) {
		super($4)
	}
}$0
endsnippet

#######################  React  #######################

#######################  Vue  #######################

#######################  Node.js  #######################
snippet fs "" i
const fs = require('fs')$0
endsnippet

snippet http "" i
const http = require('http')$0
endsnippet

snippet net "" i
const net = require('net')$0
endsnippet

snippet path "" i
const path = require('path')$0
endsnippet

snippet url "" i
const url = require('url')$0
endsnippet

snippet querystring "" i
const qs = require('querystring')$0
endsnippet

snippet events "" i
const Emitter = require('events').EventEmitter$0
endsnippet

#######################  其他  #######################
snippet con "const" i
const 
endsnippet

snippet ret "return" i
return 
endsnippet

snippet timeout "setTimeout" i
setTimeout(() => {
	$2
}, ${1:1000})
endsnippet

snippet okeys "Object.keys().foreach" i
Object.keys($1).forEach((key) => {
	$0
})
endsnippet

# vim:ft=snippets:
